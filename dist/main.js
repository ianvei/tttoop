(()=>{"use strict";class t{constructor(){this.turn="X",this.board=new Array(9).fill(null)}nextTurn(){this.turn="X"===this.turn?"O":"X"}makeMove(t){this.isInProgress()&&(this.board[t]||(this.board[t]=this.turn,this.findWinningCombination()||this.nextTurn()))}findWinningCombination(){const t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(const n of t){const[t,i,e]=n;if(this.board[t]&&this.board[t]===this.board[i]&&this.board[t]===this.board[e])return console.log(`${this.board[t]} wins!`),n}return null}isInProgress(){return!this.findWinningCombination()&&this.board.includes(null)}}let n=new t,i=new class{constructor(t){this.root=t,this.root.innerHTML='\n            <div class="header">\n                <div class="header__turn">\n                    X\'s turn\n                </div> \n                <div class="header__status"> \n                    In Progress\n                </div>\n                <button type="button" class="header__restart">\n                    <span class="material-symbols-outlined">\n                    refresh\n                    </span>\n                </button>\n            </div>\n            <div class="board">\n                <div class="board__tile" data-index="0"></div>\n                <div class="board__tile" data-index="1"></div>\n                <div class="board__tile" data-index="2"></div>\n                <div class="board__tile" data-index="3"></div>\n                <div class="board__tile" data-index="4"></div>\n                <div class="board__tile" data-index="5"></div>\n                <div class="board__tile" data-index="6"></div>\n                <div class="board__tile" data-index="7"></div>\n                <div class="board__tile" data-index="8"></div>\n            </div>\n        ',this.root.querySelectorAll(".board__tile").forEach((t=>{t.addEventListener("click",(()=>{this.onTileClick(t.dataset.index)}))})),this.root.querySelector(".header__restart").addEventListener("click",(()=>{this.onRestartClick()}))}update(t){this.updateTurn(t),this.updateStatus(t),this.updateBoard(t)}updateStatus(t){let n="In Progress";t.findWinningCombination()?n=`${t.turn} is the winner`:t.isInProgress()||(n="It's a tie"),this.root.querySelector(".header__status").textContent=n}updateTurn(t){this.root.querySelector(".header__turn").textContent=`${t.turn}'s turn`}updateBoard(t){const n=t.findWinningCombination();for(let i=0;i<t.board.length;i++){const e=this.root.querySelector(`.board__tile[data-index="${i}"]`);e.classList.remove("board__tile--winner"),e.textContent=t.board[i],n&&n.includes(i)&&e.classList.add("board__tile--winner")}}}(document.getElementById("app"));i.onTileClick=function(t){n.makeMove(t),i.update(n)},i.onRestartClick=function(){n=new t,i.update(n)},i.update(n)})();